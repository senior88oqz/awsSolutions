---
- hosts: webApp
  become: yes
  vars:
    # Vars can also be passed in via CLI with `--extra-vars="name=value"`.
    app_location: /home/ubuntu/app
    pipeline_location: /home/ubuntu
    device_name: /dev/xvdb
    node_version: v8.11.4
    solr_version: 7.4.0

  pre_tasks:
    - name: Update apt cache if needed
      apt: update_cache=yes cache_valid_time=3600

  tasks:
    - name: Install system wide packages/tools java, screen
      apt: name={{ item }} state=present
      with_items:
        - openjdk-8-jdk

    - name: Install NVM
      shell: >
        curl https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
        creates=/home/ubuntu/.nvm/nvm.sh
      become_user: ubuntu

    - name: Install node and set version
      shell: >
        /bin/bash -c "source ~/.nvm/nvm.sh && nvm install --lts"
        creates=/home/ubuntu/.nvm/alias
      become_user: ubuntu

    - name: Add another bin dir to system-wide $PATH.
      copy:
        dest: /etc/profile.d/custom-path.sh
        content: 'PATH=$PATH:/home/ubuntu/.nvm/versions/node/{{ node_version }}/bin'

    - name: Set environment variables
      lineinfile: 
        dest: /etc/environment
        line: "{{ item }}"
        create: yes
      with_items:
        - export LC_ALL="en_US.UTF-8"
        - export LC_CTYPE="en_US.UTF-8"
        - export IP4=$(hostname -I)

    - name: Link nvm-> node, npm
      file: 
        src: "/home/ubuntu/.nvm/versions/node/{{ node_version }}/bin/{{ item.src }}"
        dest: "/usr/bin/{{ item.dest }}"
        state: link
      with_items:
        - { src: 'node', dest: 'node' }
        - { src: 'npm', dest: 'npm' }   

    - name: Install Forever
      npm: name=forever state=present global=yes

    - name: link forever
      file: 
        src: "/home/ubuntu/.nvm/versions/node/{{ node_version }}/bin/{{ item.src }}"
        dest: "/usr/bin/{{ item.dest }}"
        state: link
      with_items:
        - { src: 'forever', dest: 'forever' }

    # # - name: Ensure Node.js app folder exists
    # #   file: 
    # #     path: "{{node_apps_location}}"
    # #     state: directory
    # #   become_user: ubuntu
    
    - name: copy ssh config & access key to code commit
      copy:
        src: "{{ item.src }}"
        dest: /home/ubuntu/.ssh/
        mode: "{{ item.mode }}"
      become_user: ubuntu
      with_items:
        - {src: '.ssh/config', mode: '0600'}
        - {src: '~/.ssh/codecommit_rsa', mode: '0400'}
    
    - name: change access key permission
      file:
        path: /home/ubuntu/.ssh/codecommit_rsa
        mode: 0400
    
    - name: Checkout web application from codecommit
      git:
        repo: "<FILL_ME>"
        dest: "{{ app_location }}"
        accept_hostkey: yes      
        version: "develop"
      become_user: ubuntu

    # - name: Update submodules
    #   command: bash {{ app_location }}/lexx-core_init.sh
    #   become_user: ubuntu

    - name: Install app dependencies defined in package.json
      npm: path={{app_location}}/lexx-core
      become_user: ubuntu

    - name: Run build.sh
      shell: "./build.sh"
      args:
        chdir: "{{app_location}}/lexx-core"
      become_user: ubuntu
      register: buildInfo

    # - name: Print build info
    #   debug: msg="output message {{ buildInfo.stdout }}"

    # - name: Check list of running Node.js apps
    #   command: forever list
    #   register: forever_list
    #   changed_when: false
    #   become_user: ubuntu

    # - name: Start Node.js app
    #   command: "forever start {{ app_location }}/lexx-core/dist/server/run.js"
    #   # avoid start another running instance
    #   when: "forever_list.stdout.find(app_location + '/lexx-core/dist/server/run.js') == -1"
    #   become_user: ubuntu

    # - name: Port forwarding
    #   command: "sudo iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 9000"
    
    # # - command: "forever stopall"
    
      