---
- hosts: ec2Demo
  become: yes
  vars:
    # Vars can also be passed in via CLI with `--extra-vars="name=value"`.
    node_apps_location: /home/ubuntu/node
    pipeline_location: /home/ubuntu
    device_name: /dev/xvdb

  pre_tasks:
    - name: Update apt cache if needed
      apt: update_cache=yes cache_valid_time=3600

  tasks:
    - name: Install system wide packages/tools java, screen
      apt: name={{ item }} state=present
      with_items:
        - openjdk-8-jdk
        - screen

    # - name: mkfs.ext4 <device name>
    #   shell: mkfs.ext4 <device_name>
    #   # only run this command when the volume is used for the first time

    - name: Mount extra volume at reboot
      mount: 
        path: /usr/local/opt
        src: "{{ device_name }}"
        fstype: ext4
        state: mounted

    - name: Install NVM
      shell: >
        curl https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
        creates=/home/ubuntu/.nvm/nvm.sh
      become_user: ubuntu

    - name: Install node and set version
      shell: >
        /bin/bash -c "source ~/.nvm/nvm.sh && nvm install --lts"
        creates=/home/ubuntu/.nvm/alias
      become_user: ubuntu

    - name: Add another bin dir to system-wide $PATH.
      copy:
        dest: /etc/profile.d/custom-path.sh
        content: 'PATH=$PATH:/home/ubuntu/.nvm/versions/node/v8.11.3/bin'

    - name: Set environment variables
      lineinfile: 
        dest: /etc/environment
        line: "{{ item }}"
        create: yes
      with_items:
        - export LC_ALL="en_US.UTF-8"
        - export LC_CTYPE="en_US.UTF-8"

    - name: Link nvm-> node, npm
      file: 
        src: "/home/ubuntu/.nvm/versions/node/v8.11.3/bin/{{ item.src }}"
        dest: "/usr/bin/{{ item.dest }}"
        state: link
      with_items:
        - { src: 'node', dest: 'node' }
        - { src: 'npm', dest: 'npm' }   

    - name: Install Forever
      npm: name=forever state=present global=yes

    - name: link forever
      file: 
        src: "/home/ubuntu/.nvm/versions/node/v8.11.3/bin/{{ item.src }}"
        dest: "/usr/bin/{{ item.dest }}"
        state: link
      with_items:
        - { src: 'forever', dest: 'forever' }

    - name: Ensure Node.js app folder exists
      file: 
        path: "{{node_apps_location}}"
        state: directory
      become_user: ubuntu
    
    - name: copy ssh config & access key to code commit
      copy:
        src: "{{ item.src }}"
        dest: /home/ubuntu/.ssh/
        mode: "{{ item.mode }}"
      become_user: ubuntu
      with_items:
        - {src: '.ssh/config', mode: '0600'}
        - {src: '~/.ssh/codecommit_rsa', mode: '0400'}
    
    # - name: change access key permission
    #   file:
    #     path: /home/ubuntu/.ssh/codecommit_rsa
    #     mode: 0400
    
    - name: Checkout web application from codecommit
      git:
        repo: "ssh://git-codecommit.ap-southeast-2.amazonaws.com/v1/repos/lexx-core"
        dest: "{{node_apps_location}}/lexx-core"
        accept_hostkey: yes
      become_user: ubuntu

    - name: Install app dependencies defined in package.json
      npm: path={{node_apps_location}}/lexx-core

    - name: Run build.sh
      shell: "./build.sh"
      args:
        chdir: "{{node_apps_location}}/lexx-core"
      become_user: ubuntu
      register: buildInfo

    - name: Print build info
      debug: msg="output message {{ buildInfo.stdout }}"

    - name: Check list of running Node.js apps
      command: forever list
      register: forever_list
      changed_when: false
      become_user: ubuntu

    - name: Start Node.js app
      command: "forever start {{node_apps_location}}/lexx-core/dist/server/run.js"
      # avoid start another running instance
      when: "forever_list.stdout.find(node_apps_location + '/lexx-core/dist/server/run.js') == -1"
      become_user: ubuntu

    - name: Port forwarding
      command: "sudo iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 80 -j REDIRECT --to-port 9000"
    
    # - command: "forever stopall"
    
      